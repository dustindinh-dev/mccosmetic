/*
 * This file is generated by jOOQ.
 */
package io.lumine.cosmetics.storage.sql.mappings.tables;


import io.lumine.cosmetics.storage.sql.mappings.DefaultSchema;
import io.lumine.cosmetics.storage.sql.mappings.Indexes;
import io.lumine.cosmetics.storage.sql.mappings.Keys;
import io.lumine.cosmetics.storage.sql.mappings.tables.records.ProfileEquippedRecord;

import java.util.Arrays;
import java.util.List;

import io.lumine.utils.lib.jooq.Field;
import io.lumine.utils.lib.jooq.ForeignKey;
import io.lumine.utils.lib.jooq.Index;
import io.lumine.utils.lib.jooq.Name;
import io.lumine.utils.lib.jooq.Record;
import io.lumine.utils.lib.jooq.Row4;
import io.lumine.utils.lib.jooq.Schema;
import io.lumine.utils.lib.jooq.Table;
import io.lumine.utils.lib.jooq.TableField;
import io.lumine.utils.lib.jooq.TableOptions;
import io.lumine.utils.lib.jooq.UniqueKey;
import io.lumine.utils.lib.jooq.impl.DSL;
import io.lumine.utils.lib.jooq.impl.SQLDataType;
import io.lumine.utils.lib.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MccosmeticsProfileEquipped extends TableImpl<ProfileEquippedRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mccosmetics_profile_equipped</code>
     */
    public static final MccosmeticsProfileEquipped MCCOSMETICS_PROFILE_EQUIPPED = new MccosmeticsProfileEquipped();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfileEquippedRecord> getRecordType() {
        return ProfileEquippedRecord.class;
    }

    /**
     * The column <code>mccosmetics_profile_equipped.profile_uuid</code>.
     */
    public final TableField<ProfileEquippedRecord, String> PROFILE_UUID = createField(DSL.name("profile_uuid"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>mccosmetics_profile_equipped.slot</code>.
     */
    public final TableField<ProfileEquippedRecord, String> SLOT = createField(DSL.name("slot"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>mccosmetics_profile_equipped.cosmetic_id</code>.
     */
    public final TableField<ProfileEquippedRecord, String> COSMETIC_ID = createField(DSL.name("cosmetic_id"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>mccosmetics_profile_equipped.cosmetic_data</code>.
     */
    public final TableField<ProfileEquippedRecord, String> COSMETIC_DATA = createField(DSL.name("cosmetic_data"), SQLDataType.VARCHAR(128).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    private MccosmeticsProfileEquipped(Name alias, Table<ProfileEquippedRecord> aliased) {
        this(alias, aliased, null);
    }

    private MccosmeticsProfileEquipped(Name alias, Table<ProfileEquippedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mccosmetics_profile_equipped</code> table
     * reference
     */
    public MccosmeticsProfileEquipped(String alias) {
        this(DSL.name(alias), MCCOSMETICS_PROFILE_EQUIPPED);
    }

    /**
     * Create an aliased <code>mccosmetics_profile_equipped</code> table
     * reference
     */
    public MccosmeticsProfileEquipped(Name alias) {
        this(alias, MCCOSMETICS_PROFILE_EQUIPPED);
    }

    /**
     * Create a <code>mccosmetics_profile_equipped</code> table reference
     */
    public MccosmeticsProfileEquipped() {
        this(DSL.name("mccosmetics_profile_equipped"), null);
    }

    public <O extends Record> MccosmeticsProfileEquipped(Table<O> child, ForeignKey<O, ProfileEquippedRecord> key) {
        super(child, key, MCCOSMETICS_PROFILE_EQUIPPED);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MCCOSMETICS_PROFILE_EQUIPPED_MCCOSMETICS_PROFILE_EQUIPPED_COSMETIC_ID_INDEX);
    }

    @Override
    public UniqueKey<ProfileEquippedRecord> getPrimaryKey() {
        return Keys.KEY_MCCOSMETICS_PROFILE_EQUIPPED_PRIMARY;
    }

    @Override
    public List<ForeignKey<ProfileEquippedRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MCCOSMETICS_PROFILE_EQUIPPED_PROFILE_FK);
    }

    private transient MccosmeticsProfile _mccosmeticsProfile;

    /**
     * Get the implicit join path to the
     * <code>mythiccraft_test_mccosmetics.mccosmetics_profile</code> table.
     */
    public MccosmeticsProfile mccosmeticsProfile() {
        if (_mccosmeticsProfile == null)
            _mccosmeticsProfile = new MccosmeticsProfile(this, Keys.MCCOSMETICS_PROFILE_EQUIPPED_PROFILE_FK);

        return _mccosmeticsProfile;
    }

    @Override
    public MccosmeticsProfileEquipped as(String alias) {
        return new MccosmeticsProfileEquipped(DSL.name(alias), this);
    }

    @Override
    public MccosmeticsProfileEquipped as(Name alias) {
        return new MccosmeticsProfileEquipped(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MccosmeticsProfileEquipped rename(String name) {
        return new MccosmeticsProfileEquipped(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MccosmeticsProfileEquipped rename(Name name) {
        return new MccosmeticsProfileEquipped(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
